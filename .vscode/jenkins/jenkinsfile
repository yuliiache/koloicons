def tools
def LAST_STAGE_NAME
pipeline {
        agent any
        environment {
            TEAM_NAME = 'Team 2'
            SLACK_CHANNEL = '#ci-cd'
            DEVELOPMENT_BRANCH = 'develop'
            DEV_ENV_CONF_PATH = '/var/lib/jenkins/env_config/.env.development'
            PROJECT_URL = 'http://18.184.16.101'
            AVAILABLE_PORTS_PATH = "${WORKSPACE}/jenkins/availablePorts.txt"
            NGINX_CONF_TEMPLATE_FILE = 'nginx_config_template.conf'
            CURRENT_BUILD_CONFIG_FILE = 'config.json'
            JENKINS_BUILD_CONF_DIR = '/var/lib/jenkins/workspace/buildConfig'
            JENKINS_ACTIVE_PROJECTS_PATH = '/var/lib/jenkins/workspace/workspaces.txt'
            NGINX_CONF_TEMPLATE_PATH = "${WORKSPACE}/jenkins/${NGINX_CONF_TEMPLATE_FILE}"
            NGINX_SITES_CONF_DIR = '/etc/nginx/conf.d'
            PROJ_NAME = sh(
                script: 'echo "${WORKSPACE}" | sed \'s:.*/::\'',
                returnStdout: true
            ).trim()
            CURRENT_BUILD_CONFIG_PATH = "${JENKINS_BUILD_CONF_DIR}/${PROJ_NAME}"
        }

        stages {
            stage('Init tools') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                        tools = load 'jenkins/utils/tools.groovy'
                    }
                }
            }
            //skip next steps if not PR or development
            stage('Is PR') {
                when {
                    not {
                        branch "${DEVELOPMENT_BRANCH}"
                    }
                }
                steps {
                    script {
                        def isPr = tools.isPR(env.BRANCH_NAME)
                        sh "echo isPr - ${isPr}"
                        if (!isPr) {
                        deleteDir()
                        currentBuild.getRawBuild().getExecutor().interrupt(Result.SUCCESS)
                        sleep(1) // Interrupt is not blocking and does not take effect immediately
                        sh 'echo Not PR'
                        }
                    }
                }
            }

            stage('Clear old projects') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                        tools.clearOldProjects(JENKINS_ACTIVE_PROJECTS_PATH, JENKINS_BUILD_CONF_DIR, NGINX_SITES_CONF_DIR)
                    }
                }
            }

            stage('Get free ports') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                        def PORT = tools.getAssignedPort(CURRENT_BUILD_CONFIG_PATH, CURRENT_BUILD_CONFIG_FILE, AVAILABLE_PORTS_PATH)
                        env.PORT = PORT
                        if (!PORT) {
                        def slackResponse = slackSend(color: 'danger', channel: "${SLACK_CHANNEL}", message: "${TEAM_NAME}\r\n‚õîNo free ports left‚õî")
                        throw new Exception('No free ports left')
                        }
                    }
                }
            }

            stage('Install modules') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                    }

                    echo "changeId - ${env.CHANGE_ID}"
                    echo "changeTarget - ${env.CHANGE_TARGET}"
                    echo " ${env.BRANCH_NAME}"
                    echo "${WORKSPACE}"
                    sh 'npm install'
                }
            }

            stage('Check eslint') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                        sh 'npx eslint src/**'
                    }
                }
            }

            stage('Test') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                        sh 'npm run test'
                    }
                }
            }

            stage('Copy .env file') {
                    steps {
                        script {
                            LAST_STAGE_NAME = env.STAGE_NAME
                            sh 'sudo cp ${DEV_ENV_CONF_PATH} ${WORKSPACE}'
                        }
                    }
            }

            stage('Build') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                    }

                    sh 'CI=false npm run build:dev'
                }
            }

            stage('Config nginx for features') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                    }

                    // sh 'sudo rm -rf /var/www/${PROJ_NAME}'
                    echo "port - ${PORT}"
                    sh 'sudo rm -f ${NGINX_SITES_CONF_DIR}/${PROJ_NAME}.conf'
                    sh 'sudo cp ${NGINX_CONF_TEMPLATE_PATH} ${NGINX_SITES_CONF_DIR}'
                    sh 'sudo mv ${NGINX_SITES_CONF_DIR}/${NGINX_CONF_TEMPLATE_FILE} ${NGINX_SITES_CONF_DIR}/${PROJ_NAME}.conf'
                    sh 'sudo sed -i "s/%PORT%/\"${PORT}\"/" ${NGINX_SITES_CONF_DIR}/${PROJ_NAME}.conf'
                    sh 'sudo sed -i "s/%PROJECT_NAME%/\"${PROJ_NAME}\"/" ${NGINX_SITES_CONF_DIR}/${PROJ_NAME}.conf'
                }
            }

            stage('Deploy') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                    }
                    sh "sudo rm -rf /var/www/${PROJ_NAME}"
                    sh "sudo cp -r ${WORKSPACE}/build/ /var/www/${PROJ_NAME}"
                }
            }

            stage('Reboot ngix') {
                steps {
                    script {
                        LAST_STAGE_NAME = env.STAGE_NAME
                    }

                    sh 'sudo systemctl stop nginx'
                    sh 'sudo systemctl start nginx'
                }
            }

            stage('Notification devel') {
            when {
                    branch "${DEVELOPMENT_BRANCH}"
            }
                steps {
                    script {
                        def slackResponse = slackSend(color: 'good', channel: "${SLACK_CHANNEL}", message: "${TEAM_NAME}\r\nüéâSuccessfully merged to Develüéâ  \r\n  ${PROJECT_URL}:${PORT}")
                    }
                }
            }

            stage('Notification feature') {
            when {
                    not {
                        branch "${DEVELOPMENT_BRANCH}"
                    }
            }

                steps {
                    script {
                        echo "port - ${PORT}"
                        def threadId = tools.getSlackThreadId("${CURRENT_BUILD_CONFIG_PATH}/${CURRENT_BUILD_CONFIG_FILE}")
                        def branchInfo = tools.getBranchDetails(env.BRANCH_NAME)
                        if (threadId) {
                        slackSend(channel: threadId, message: 'Updated ü•≥')
                        }
                        else {
                        def slackResponse = slackSend(color: 'good', channel: "${SLACK_CHANNEL}", message: "${TEAM_NAME}\r\n${env.BRANCH_NAME} \r\nAuthor: ${branchInfo.author.login} \r\nPR: ${branchInfo.url} \r\nBuild:  ${PROJECT_URL}:${PORT}")
                        tools.saveSlackThreadId("${slackResponse.threadId}", "${CURRENT_BUILD_CONFIG_PATH}/${CURRENT_BUILD_CONFIG_FILE}")
                        }
                    }
                }
            }
        }

        post {
            success {
                archiveArtifacts artifacts: 'build/',
                fingerprint: true,
                onlyIfSuccessful: true
                script {
                    sh "echo stageName ${STAGE_NAME}"
                }
            }
        failure {
            script {
                def slackResponse = slackSend(color: 'danger', channel: "${SLACK_CHANNEL}", message: "${TEAM_NAME}\r\n${env.BRANCH_NAME} \r\n Something went wrong at stage - ‚ö†Ô∏è${LAST_STAGE_NAME}‚ö†Ô∏è. \r\n Do not worry and try to fix it yourselve.\r\n If you have no idea what is causing the problem take a deep breath and contact your devOps")
            }
        }
        }
}
